//approve chaincode peer0-afrinic
peer lifecycle chaincode approveformyorg --channelID mychannel --name basic --version 1.0 --init-required --package-id basic:d4f4641a7fa270f91d5a17a5f2fee6bec0ad5385ad7b53e24937531d56b03ac0 --sequence 1 -o orderer:7050 --tls --cafile $ORDERER_CA 

//approve chaincode peer0-apnic
peer lifecycle chaincode approveformyorg --channelID mychannel --name basic --version 1.0 --init-required --package-id basic:9cdc47d49891551ec34982238996d1380d578e64f9a1c76ff9319946150ee72d --sequence 1 -o orderer:7050 --tls --cafile $ORDERER_CA 

//approve chaincode peer0-arin
peer lifecycle chaincode approveformyorg --channelID mychannel --name basic --version 1.0 --init-required --package-id basic:c19a69b1b13f655eb3c8dadfb7f29ecc10f9a8eddb3731f82da8877a55288fd0 --sequence 1 -o orderer:7050 --tls --cafile $ORDERER_CA 

//approve chaincode peer0-ripencc
peer lifecycle chaincode approveformyorg --channelID mychannel --name basic --version 1.0 --init-required --package-id basic:231d06f7f64f4795f6291b74a07dfe9f4d325fdf3c9006dd6e03b5f112040d54 --sequence 1 -o orderer:7050 --tls --cafile $ORDERER_CA 

//approve chaincode peer0-lacnic
peer lifecycle chaincode approveformyorg --channelID mychannel --name basic --version 1.0 --init-required --package-id basic:041e229761f2201729253479af6b696b837273492eba5dd91a09cf07d18caa5b --sequence 1 -o orderer:7050 --tls --cafile $ORDERER_CA 

//approve chaincode peer0-rono
peer lifecycle chaincode approveformyorg --channelID mychannel --name basic --version 1.0 --init-required --package-id basic:217bc70ced3fa14482e8628a613a328e84e7e7bfe7c42a7d94e3306c96788c58 --sequence 1 -o orderer:7050 --tls --cafile $ORDERER_CA


//checkcommitreadiness
peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name basic --version 1.0 --init-required --sequence 1 -o -orderer:7050 --tls --cafile $ORDERER_CA


//commit chaincode

peer lifecycle chaincode commit \
  -o orderer:7050 \
  --channelID mychannel \
  --name basic \
  --version 1.0 \
  --sequence 1 \
  --init-required \
  --tls true \
  --cafile $ORDERER_CA \
  --peerAddresses peer0-afrinic:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/afrinic.rono.com/peers/peer0.afrinic.rono.com/tls/ca.crt \
  --peerAddresses peer0-apnic:9051 \
  --tlsRootCertFiles /organizations/peerOrganizations/apnic.rono.com/peers/peer0.apnic.rono.com/tls/ca.crt \
  --peerAddresses peer0-arin:11051 \
  --tlsRootCertFiles /organizations/peerOrganizations/arin.rono.com/peers/peer0.arin.rono.com/tls/ca.crt \
  --peerAddresses peer0-ripencc:12051 \
  --tlsRootCertFiles /organizations/peerOrganizations/ripencc.rono.com/peers/peer0.ripencc.rono.com/tls/ca.crt \
  --peerAddresses peer0-lacnic:13051 \
  --tlsRootCertFiles /organizations/peerOrganizations/lacnic.rono.com/peers/peer0.lacnic.rono.com/tls/ca.crt \
  --peerAddresses peer0-rono:14051 \
  --tlsRootCertFiles /organizations/peerOrganizations/rono.rono.com/peers/peer0.rono.rono.com/tls/ca.crt




//verfying
peer lifecycle chaincode querycommitted -C mychannel

 InitLedger command

peer chaincode invoke \
  -o orderer:7050 \
  --isInit \
  --tls true \
  --cafile $ORDERER_CA \
  -C mychannel \
  -n basic \
  --peerAddresses peer0-afrinic:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/afrinic.rono.com/peers/peer0.afrinic.rono.com/tls/ca.crt \
  --peerAddresses peer0-apnic:9051 \
  --tlsRootCertFiles /organizations/peerOrganizations/apnic.rono.com/peers/peer0.apnic.rono.com/tls/ca.crt \
  --peerAddresses peer0-arin:11051 \
  --tlsRootCertFiles /organizations/peerOrganizations/arin.rono.com/peers/peer0.arin.rono.com/tls/ca.crt \
  --peerAddresses peer0-ripencc:12051 \
  --tlsRootCertFiles /organizations/peerOrganizations/ripencc.rono.com/peers/peer0.ripencc.rono.com/tls/ca.crt \
  --peerAddresses peer0-lacnic:13051 \
  --tlsRootCertFiles /organizations/peerOrganizations/lacnic.rono.com/peers/peer0.lacnic.rono.com/tls/ca.crt \
  --peerAddresses peer0-rono:14051 \
  --tlsRootCertFiles /organizations/peerOrganizations/rono.rono.com/peers/peer0.rono.rono.com/tls/ca.crt \
  -c '{"Args":["InitLedger"]}' \
  --waitForEvent



invoke command (test cases)

üîê 1Ô∏è‚É£ Register User with Affiliation
fabric-ca-client register \
  --id.name user1 \
  --id.secret user1pw \
  --id.type client \
  --id.affiliation arin.business.technical \
  --id.attrs "hf.Registrar.Roles=client, hf.Registrar.Attributes=*, hf.Revoker=true, hf.GenCRL=true, hf.AffiliationMgr=true" \
  --tls.certfiles /organizations/fabric-ca/org2/tls-cert.pem


üßæ 2Ô∏è‚É£ Enroll the User
fabric-ca-client enroll \
  -u https://user1:user1pw@ca-org2:8054 \
  --tls.certfiles /organizations/fabric-ca/org2/tls-cert.pem

1Ô∏è‚É£ Register Company
peer chaincode invoke \
  -o orderer:7050 \
  --tls true \
  --cafile $ORDERER_CA \
  -C mychannel \
  -n basic \
  --peerAddresses peer0-org1:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
  --peerAddresses peer0-org2:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
  --peerAddresses peer0-org3:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt \
  --peerAddresses peer0-org4:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/tls/ca.crt \
  --peerAddresses peer0-org5:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org5.example.com/peers/peer0.org5.example.com/tls/ca.crt \
  -c '{"function":"RegisterCompany","Args":["BRAC", "BRAC Ltd", "APNIC", "meta=gov_org"]}' \
  --waitForEvent


  2Ô∏è‚É£ Register User
  peer chaincode invoke \
  -o orderer:7050 \
  --tls true \
  --cafile $ORDERER_CA \
  -C mychannel \
  -n basic \
  --peerAddresses peer0-org1:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
  --peerAddresses peer0-org2:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
  --peerAddresses peer0-org3:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt \
  --peerAddresses peer0-org4:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/tls/ca.crt \
  --peerAddresses peer0-org5:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org5.example.com/peers/peer0.org5.example.com/tls/ca.crt \
  -c '{"function":"RegisterUser","Args":["222", "technical", "BRAC", "2025-05-23T10:00:00Z"]}' \
  --waitForEvent
  3Ô∏è‚É£ Login User

  peer chaincode invoke \
  -o orderer:7050 \
  --tls true \
  --cafile $ORDERER_CA \
  -C mychannel \
  -n basic \
  --peerAddresses peer0-org1:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
  --peerAddresses peer0-org2:9051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
  --peerAddresses peer0-org3:11051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt \
  --peerAddresses peer0-org4:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/tls/ca.crt \
  --peerAddresses peer0-org5:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org5.example.com/peers/peer0.org5.example.com/tls/ca.crt \
  -c '{"function":"LoginUser","Args":["user1"]}' \
  --waitForEvent


  üîç Query User
  peer chaincode query \
  -C mychannel \
  -n basic \
  -c '{"function":"GetUser","Args":["user1"]}'

  üîç Query Company
  peer chaincode query \
  -C mychannel \
  -n basic \
  -c '{"function":"GetAllocationsByMember","Args":["brac0011"]}'


### 1. **AssignPrefix**

Assign an IP prefix (only Org1MSP allowed):


peer chaincode invoke \
  -o orderer:7050 \
  --tls true \
  --cafile $ORDERER_CA \
  -C mychannel \
  -n basic \
  --peerAddresses peer0-org1:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
  --peerAddresses peer0-org2:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
  --peerAddresses peer0-org3:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt \
  --peerAddresses peer0-org4:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/tls/ca.crt \
  --peerAddresses peer0-org5:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org5.example.com/peers/peer0.org5.example.com/tls/ca.crt \
  -c '{"Args":["AssignPrefix","195.168.1.0/24","Org4MSP","2025-05-22T10:00:00Z"]}' \
  --waitForEvent

---
5Ô∏è‚É£ Sub-Assign Prefix (By RIR to Company)
peer chaincode invoke \
  -o orderer:7050 \
  --isInit \
  --tls true \
  --cafile $ORDERER_CA \
  -C mychannel \
  -n basic \
  --peerAddresses peer0-afrinic:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/afrinic.rono.com/peers/peer0.afrinic.rono.com/tls/ca.crt \
  --peerAddresses peer0-apnic:9051 \
  --tlsRootCertFiles /organizations/peerOrganizations/apnic.rono.com/peers/peer0.apnic.rono.com/tls/ca.crt \
  --peerAddresses peer0-arin:11051 \
  --tlsRootCertFiles /organizations/peerOrganizations/arin.rono.com/peers/peer0.arin.rono.com/tls/ca.crt \
  --peerAddresses peer0-ripencc:12051 \
  --tlsRootCertFiles /organizations/peerOrganizations/ripencc.rono.com/peers/peer0.ripencc.rono.com/tls/ca.crt \
  --peerAddresses peer0-lacnic:13051 \
  --tlsRootCertFiles /organizations/peerOrganizations/lacnic.rono.com/peers/peer0.lacnic.rono.com/tls/ca.crt \
  --peerAddresses peer0-rono:14051 \
  --tlsRootCertFiles /organizations/peerOrganizations/rono.rono.com/peers/peer0.rono.rono.com/tls/ca.crt \
  -c ''{"function":"CreateSystemManager","Args":["100", "rono admin", "rono@example.com", "RonoMSP", "rono", "2025-06-01T12:00:00Z"]}'' \
  --waitForEvent
### 2. **RegisterAS**
"org1 admin", "org1@example.com"
"rono admin", "rono@example.com",
 "GP Admin", "admin@grameenphone.com",
Register an AS number with a public key:

peer chaincode invoke \
  -o orderer:7050 \
  --tls true \
  --cafile $ORDERER_CA \
  -C mychannel \
  -n basic \
  --peerAddresses peer0-afrinic:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/afrinic.rono.com/peers/peer0.afrinic.rono.com/tls/ca.crt \
  -c '{"function":"SetASData","Args":["200", "[\"103.108.202.0/23\"]", "BD", "APNIC", "2025-07-05T13:30:00Z"]}' \
  --waitForEvent



---

### 3. **AnnounceRoute**

Announce a route with a path (ASN path as JSON array):

peer chaincode invoke \
  -o orderer:7050 \
  --tls true \
  --cafile $ORDERER_CA \
  -C mychannel \
  -n basic \
  --peerAddresses peer0-org1:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
  --peerAddresses peer0-org2:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
  --peerAddresses peer0-org3:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt \
  -c '{"Args":["AnnounceRoute","64512","195.168.1.0/24","[\"64512\",\"64513\",\"64514\"]"]}' \
  --waitForEvent


---

### 4. **ValidatePath**

Validate an AS path against the stored route:


peer chaincode query \
  -C mychannel \
  -n basic \
  -c '{"Args":["GetAllASData"]}'


---

### 5. **RevokeRoute**

Revoke a route by ASN and prefix:


peer chaincode invoke \
  -o orderer:7050 \
  --tls true \
  --cafile $ORDERER_CA \
  -C mychannel \
  -n basic \
  --peerAddresses peer0-org1:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
  -c '{"Args":["RevokeRoute","64512","192.168.1.0/24"]}' \
  --waitForEvent


---

### 6. **GetPrefixAssignment**

Query prefix assignment info:


peer chaincode query \
  -C mychannel \
  -n basic \
  -c '{"Args":["ListAllASNValues"]}'




// access couch db
kubectl port-forward services/peer0-org1 5984:5984 [http://localhost:5984/_utils/]
kubectl port-forward services/couchdb 5984:5984 
kubectl port-forward services/gobgp-api 2000:2000

// create connection profile for client
go to nfs_clientshare

./scripts/ccp.sh 


kubectl port-forward services/api 4000 

kubectl port-forward service/gobgp-api 2000:2000
 


---

### 1. **Add a peer**

```bash
curl -X POST "http://localhost:2000/add-peer?instance=rono" \
  -H "Content-Type: application/json" \
  -d '{
        "neighbor_address": "192.0.2.1",
        "peer_as": 65001
      }'
```

---

### 2. **Announce a route**

```bash
curl -X POST "http://localhost:2000/announce-route?instance=rono" \
  -H "Content-Type: application/json" \
  -d '{
        "prefix": "10.10.0.0",
        "prefix_len": 24,
        "next_hop": "192.0.2.2"
      }'
```

---

### 3. **Withdraw a route**

```bash
curl -X POST "http://localhost:2000/withdraw-route?instance=rono" \
  -H "Content-Type: application/json" \
  -d '{
        "prefix": "10.10.0.0",
        "prefix_len": 24,
        "next_hop": "192.0.2.2"
      }'
```

---

### 4. **List routes**

```bash
curl "http://localhost:2000/routes?instance=rono"
```



---

### ‚úÖ 1. **RegisterMember**

```bash
peer chaincode invoke \
  -o orderer:7050 \
  --tls true \
  --cafile $ORDERER_CA \
  -C mychannel \
  -n basic \
  --peerAddresses peer0-afrinic:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/afrinic.rono.com/peers/peer0.afrinic.rono.com/tls/ca.crt \
  -c '{
    "function": "RegisterCompanyWithMember",
    "Args": [
      "brac0011",
      "Grameenphone Ltd",
      "Telecommunications",
      "GP House, Bashundhara",
      "Dhaka",
      "Dhaka",
      "1229",
      "BD",
      "+8801700000000",
      "info@grameenphone.com",
      "abuse@grameenphone.com",
      "false",
      "brac0011",
      "GP Network Admin",
      "BD",
      "admin@grameenphone.com",
      "AfrinicMSP",
      "2025-06-25T14:00:00Z"
    ]
  }' \
  --waitForEvent

```

---

### ‚úÖ 2. **ApproveMember**

```bash
peer chaincode invoke \
  -o orderer:7050 \
  --tls true \
  --cafile $ORDERER_CA \
  -C mychannel \
  -n basic \
  --peerAddresses peer0-org1:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
  --peerAddresses peer0-org2:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
  --peerAddresses peer0-org3:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt \
  --peerAddresses peer0-org4:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/tls/ca.crt \
  --peerAddresses peer0-org5:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org5.example.com/peers/peer0.org5.example.com/tls/ca.crt \
  --peerAddresses peer0-org6:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org6.example.com/peers/peer0.org6.example.com/tls/ca.crt \
  -c '{"Args":["ApproveMember","brac001"]}' \
  --waitForEvent
```

---

### ‚úÖ 3. **RequestResource**

```bash
peer chaincode invoke \
  -o orderer:7050 \
  --tls true \
  --cafile $ORDERER_CA \
  -C mychannel \
  -n basic \
  --peerAddresses peer0-org1:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
  --peerAddresses peer0-org2:9051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
  --peerAddresses peer0-org3:11051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt \
  --peerAddresses peer0-org4:12051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/tls/ca.crt \
  --peerAddresses peer0-org5:13051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org5.example.com/peers/peer0.org5.example.com/tls/ca.crt \
  --peerAddresses peer0-org6:14051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org6.example.com/peers/peer0.org6.example.com/tls/ca.crt \
  -c -c '{"Args":["RequestResource","brac001","222","ipv4","1","20250524","BD","afrinic","2025-05-27T12:00:00Z"]}' 
  --waitForEvent
```

---

### ‚úÖ 4. **ReviewRequest**

```bash
peer chaincode invoke \
  -o orderer:7050 \
  --tls true \
  --cafile $ORDERER_CA \
  -C mychannel \
  -n basic \
  --peerAddresses peer0-org1:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
  --peerAddresses peer0-org2:9051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
  --peerAddresses peer0-org3:11051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt \
  --peerAddresses peer0-org4:12051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/tls/ca.crt \
  --peerAddresses peer0-org5:13051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org5.example.com/peers/peer0.org5.example.com/tls/ca.crt \
  --peerAddresses peer0-org6:14051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org6.example.com/peers/peer0.org6.example.com/tls/ca.crt \
  -c '{"Args":["ReviewRequest","req123","approved","admin@afrinic"]}' \
  --waitForEvent
```

---

### ‚úÖ 5. **AssignResource**

```bash
peer chaincode invoke \
  -o orderer:7050 \
  --tls true \
  --cafile $ORDERER_CA \
  -C mychannel \
  -n basic \
  --peerAddresses peer0-org1:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
  --peerAddresses peer0-org2:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
  --peerAddresses peer0-org3:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt \
  --peerAddresses peer0-org4:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/tls/ca.crt \
  --peerAddresses peer0-org5:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org5.example.com/peers/peer0.org5.example.com/tls/ca.crt \
  --peerAddresses peer0-org6:7051 \
  --tlsRootCertFiles /organizations/peerOrganizations/org6.example.com/peers/peer0.org6.example.com/tls/ca.crt \
  -c '{"Args":["AssignResource","alloc001","brac001","ip","192.0.2.0/24","2025-05-24T12:00:00Z"]}' \
  --waitForEvent
```

peer chaincode invoke -n basic -C mychannel -c '{"Args":["RequestResource","req123","brac001","ipv4","192.0.2.0",1,"20250524","BD","afrinic","2025-05-27T12:00:00Z"]}'

peer chaincode query \
  -C mychannel \
  -n basic \
  -c '{"function":"GetAllPrefixesAssignedByOrg","Args":["Org1MSP"]}'





  "org1 admin", "org1@example.com"
"rono admin", "rono@example.com",
 "GP Admin", "admin@grameenphone.com",